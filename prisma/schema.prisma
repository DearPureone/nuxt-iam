generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique(map: "uuid") @db.VarChar(60)
  email             String              @unique(map: "email") @db.VarChar(255)
  password          String              @db.VarChar(255)
  first_name        String              @db.VarChar(255)
  last_name         String              @db.VarChar(255)
  role              role                @default(GENERAL)
  email_verified    Boolean             @default(false)
  last_login        DateTime?           @db.DateTime(0)
  created_at        DateTime            @default(now()) @db.DateTime(0)
  deleted_at        DateTime?           @db.DateTime(0)
  refresh_tokens    refresh_tokens[]
  users_table_perms users_table_perms[]
  example           example?
}

enum role {
  SUPER_ADMIN
  ADMIN
  GENERAL
}

model refresh_tokens {
  id           Int      @id @default(autoincrement())
  token_id     String   @unique(map: "token_id") @db.VarChar(60)
  user         users?   @relation(fields: [user_id], references: [id])
  user_id      Int
  is_active    Boolean
  date_created DateTime @default(now()) @db.DateTime(0)
}

model one_time_tokens {
  id           Int        @id @default(autoincrement())
  token_id     String     @unique(map: "token_id") @db.VarChar(60)
  token_type   tokenType?
  expires_at   DateTime   @db.DateTime(0)
  date_created DateTime   @default(now()) @db.DateTime(0)
}

enum tokenType {
  RESET
}

model example {
  id      Int    @id @default(autoincrement())
  user    users? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int?   @unique(map: "user_id")
}

// * means all users, anything else will check for uuids
model users_table_perms {
  id         Int       @id @default(autoincrement())
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int?      @unique
  can_create String?
  can_read   String?
  can_update String?
  can_delete String?
  expires_at DateTime? @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)
  created_at DateTime  @default(now()) @db.DateTime(0)
}
